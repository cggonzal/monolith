description: Monolith Project Overview
globs:
  - "**/*"
alwaysApply: true
---

# Monolith Project Overview

This rule provides a condensed overview of the Monolith application and the conventions used when developing it. Always reference this file together with `README.md` and the HTML guides in `guides/` when generating or modifying code.

## Purpose
Monolith is a full-stack Go application demonstrating sessions, GORM persistence, background jobs, WebSocket messaging, embedded templates and static assets, structured logging, and zero‑downtime deploys.

The code relies primarily on the Go standard library with a few focused dependencies such as Gorilla sessions/websocket, GORM, and `inflection` for pluralisation.

## Directory layout
- `app/config` – application configuration and environment variables.
- `app/controllers` – HTTP controller structs.
- `app/models` – GORM models and CRUD helpers.
- `app/views` – templates rendered by controllers.
- `app/routes` – routes mapping URLs to controller actions.
- `app/session` – session helpers and authentication pieces.
- `app/jobs` – background job handlers and queue logic.
- `app/services` – reusable business logic.
- `app/middleware` – middleware functions like logging, authentication and CSRF.
- `app/csrf` – CSRF token generation/validation.
- `static/` – static assets served directly.
- `server_management/` – deployment scripts and Caddy configuration.
- `guides/` – HTML guides explaining each subsystem in depth.

## Quick start
Run `make` to start a hot-reloading server if [air](https://github.com/cosmtrek/air) is installed, or `make run` otherwise. The first start creates `app.db` and migrates all models automatically. Set `SECRET_KEY` before running in production.

## Generators
Monolith ships with a generator tool (`make generator`) for scaffolding code. Available commands:
- `model NAME [field:type...]` – create a new model and update `db/db.go` for auto‑migration.
- `controller NAME [actions]` – create a controller, matching views and inject routes. Use `all` to generate the standard CRUD actions.
- `resource NAME [field:type...]` – combination of model and controller generation producing a full REST resource.
- `authentication` – scaffold a `User` model with login/signup pages and session helpers.
- `job NAME` – generate a background job and register it in `app/jobs/job_queue.go` and `app/models/job.go`.
- `admin` – create an admin dashboard (generates a `User` model if absent) and mount profiling routes.

Generated routes are appended to `app/routes/routes.go`. Generated models are added to the migration list in `db/db.go`. After generation, edit the files to add validations, real logic and templates.

## Documentation
Whenever you generate new code or modify functionality, update both `README.md` and the relevant HTML guide under `guides/`. These guides explain topics such as configuration, controllers, models, routes, jobs, and more. Keeping them current ensures the project stays as productive as frameworks like Ruby on Rails.

## Testing and development
Run `make test` to execute unit tests. Use `make build` to compile a standalone binary. Deployment is handled with the scripts in `server_management/` via `make deploy <host>`.

## Environment variables
Common variables are `PORT`, `DATABASE_URL`, `MAILGUN_DOMAIN`, `MAILGUN_API_KEY`, and `SECRET_KEY`. See the appendix of `README.md` for the full list and defaults.

Keep this overview in mind when using Cursor. Refer back to it and the guides to maintain consistency across the project.
