{{template "base.html.tmpl" .}}

{{define "title"}}Home Page{{end}}

{{define "header"}}
<header>
  <h1>Welcome to Monolith!</h1>
  <p>Your project has been created successfully.</p>
</header>
{{end}}

{{define "stylesheet"}}
<style>
  :root {
    --go-cyan: #00ADD8;
    --go-cyan-dark: #007D9C;
    --go-cyan-light: #B3EAF6;
    --go-white: #ffffff;
    --go-gray: #333f48;
    --font-sans: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
  }

  * { box-sizing: border-box; }

  html, body {
    margin: 0;
    padding: 0;
    font-family: var(--font-sans);
    color: var(--go-gray);
    background: var(--go-white);
    line-height: 1.6;
  }

  /* Header – now constrained to the same max-width as the content */
  header {
    background: var(--go-cyan);
    color: var(--go-white);
    text-align: center;
    padding: 4rem 1rem 3rem;
    max-width: 960px;          /* matches main’s width */
    margin: 2rem auto 0;       /* top margin adds white-space above */
    border-radius: 0.75rem;    /* rounded corners (all four) */
    position: relative;
  }

  header h1 {
    font-size: clamp(2.2rem, 5vw, 3rem);
    margin: 0 0 0.5rem;
    font-weight: 700;
    letter-spacing: -0.03em;
  }

  header p {
    font-size: 1.25rem;
    margin: 0;
    opacity: 0.95;
  }

  /* soft “gopher circle” accent */
  header::after {
    content: '';
    position: absolute;
    inset: 0;
    margin: auto;
    width: 200px;
    height: 200px;
    border-radius: 50%;
    background: var(--go-cyan-light);
    opacity: 0.15;
    z-index: 0;
  }
  header > * { position: relative; z-index: 1; }

  /* Main content wrapper */
  main {
    max-width: 960px;
    margin: 2rem auto 3rem;    /* 2 rem gap below the header */
    display: flex;
    gap: 2rem;
    padding: 0 1rem;
  }

  nav {
    flex: 0 0 260px;
    border: 2px solid var(--go-cyan-light);
    border-radius: 0.75rem;
    background: var(--go-white);
    padding: 1.5rem;
  }
  nav h2 {
    margin-top: 0;
    font-size: 1.1rem;
    color: var(--go-cyan-dark);
  }
  nav ul {
    list-style: none;
    padding: 0;
    margin: 0;
  }
  nav li { margin: 0.6rem 0; }
  nav a {
    color: var(--go-gray);
    text-decoration: none;
  }
  nav a:hover {
    color: var(--go-cyan-dark);
    text-decoration: underline;
  }

  section.content {
    flex: 1 1 auto;
    border: 2px solid var(--go-cyan-light);
    border-radius: 0.75rem;
    background: var(--go-white);
    padding: 2rem 2.5rem 2.5rem;
  }

  section.content h2 {
    margin-top: 0;
    font-size: 1.5rem;
    color: var(--go-cyan-dark);
  }

  section.content code {
    background: #f3f4f4;
    padding: 0.15rem 0.4rem;
    border-radius: 4px;
    font-size: 0.9rem;
  }

  /* Responsive stack */
  @media (max-width: 800px) {
    header, main { margin-left: 1rem; margin-right: 1rem; } /* breathing room */
    main { flex-direction: column; }
    nav { width: 100%; }
  }
</style>
{{end}}


{{define "body"}}
<body>
<main>
  <nav>
    <h2>Next up</h2>
    <ul>
      <li><a href="#configure-db">Configure your database</a></li>
      <li><a href="#define-models">Define models</a></li>
      <li><a href="#routes">Set up routes</a></li>
      <li><a href="#generate-templates">Generate templates</a></li>
      <li><a href="#start-server">Start the server</a></li>
      <li><a href="https://go.dev/doc/">Go documentation →</a></li>
    </ul>
  </nav>

  <section class="content">
    <h2 id="configure-db">1. Configure your database</h2>
    <p>
      Update <code>config/database.yml</code> (or the equivalent for your Go framework) with
      the correct connection information, then run:
    </p>
    <pre><code>go run cmd/migrate/main.go</code></pre>

    <h2 id="define-models">2. Define models</h2>
    <p>
      Create your data models—using your favorite ORM or the standard library—inside
      <code>internal/models/</code>. Then generate migrations if required.
    </p>

    <h2 id="routes">3. Set up routes</h2>
    <p>
      Edit <code>internal/router/router.go</code> to declare your URL mappings.
      A typical handler looks like:
    </p>
    <pre><code>func Home(w http.ResponseWriter, r *http.Request) {
    data := map[string]any{"Message": "Hello, Go world!"}
    templates.ExecuteTemplate(w, "home.html.tmpl", data)
}</code></pre>

    <h2 id="generate-templates">4. Create / generate templates</h2>
    <p>
      Place HTML templates in <code>web/templates</code>. You can scaffold them
      with:
    </p>
    <pre><code>go run cmd/scaffold/main.go -name Post</code></pre>

    <h2 id="start-server">5. Fire it up</h2>
    <p>
      Finally, boot the development server:
    </p>
    <pre><code>go run ./cmd/server</code></pre>
    <p>
      Then visit <code>http://localhost:9000</code> in your browser.
    </p>
  </section>
</main>
{{end}}


{{define "footer"}}
<footer>
</footer>
{{end}}